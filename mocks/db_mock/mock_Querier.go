// Code generated by mockery v2.50.4. DO NOT EDIT.

package db

import (
	context "context"

	db "github.com/DarcoProgramador/shortener-go-backend/internal/database/sqlc"
	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// CreateURL provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) CreateURL(ctx context.Context, arg db.CreateURLParams) (db.CreateURLRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateURL")
	}

	var r0 db.CreateURLRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateURLParams) (db.CreateURLRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.CreateURLParams) db.CreateURLRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.CreateURLRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.CreateURLParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_CreateURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateURL'
type MockQuerier_CreateURL_Call struct {
	*mock.Call
}

// CreateURL is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.CreateURLParams
func (_e *MockQuerier_Expecter) CreateURL(ctx interface{}, arg interface{}) *MockQuerier_CreateURL_Call {
	return &MockQuerier_CreateURL_Call{Call: _e.mock.On("CreateURL", ctx, arg)}
}

func (_c *MockQuerier_CreateURL_Call) Run(run func(ctx context.Context, arg db.CreateURLParams)) *MockQuerier_CreateURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.CreateURLParams))
	})
	return _c
}

func (_c *MockQuerier_CreateURL_Call) Return(_a0 db.CreateURLRow, _a1 error) *MockQuerier_CreateURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_CreateURL_Call) RunAndReturn(run func(context.Context, db.CreateURLParams) (db.CreateURLRow, error)) *MockQuerier_CreateURL_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteURLByShortCode provides a mock function with given fields: ctx, shortcode
func (_m *MockQuerier) DeleteURLByShortCode(ctx context.Context, shortcode string) error {
	ret := _m.Called(ctx, shortcode)

	if len(ret) == 0 {
		panic("no return value specified for DeleteURLByShortCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortcode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_DeleteURLByShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteURLByShortCode'
type MockQuerier_DeleteURLByShortCode_Call struct {
	*mock.Call
}

// DeleteURLByShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - shortcode string
func (_e *MockQuerier_Expecter) DeleteURLByShortCode(ctx interface{}, shortcode interface{}) *MockQuerier_DeleteURLByShortCode_Call {
	return &MockQuerier_DeleteURLByShortCode_Call{Call: _e.mock.On("DeleteURLByShortCode", ctx, shortcode)}
}

func (_c *MockQuerier_DeleteURLByShortCode_Call) Run(run func(ctx context.Context, shortcode string)) *MockQuerier_DeleteURLByShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_DeleteURLByShortCode_Call) Return(_a0 error) *MockQuerier_DeleteURLByShortCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_DeleteURLByShortCode_Call) RunAndReturn(run func(context.Context, string) error) *MockQuerier_DeleteURLByShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetURLByShortCode provides a mock function with given fields: ctx, shortcode
func (_m *MockQuerier) GetURLByShortCode(ctx context.Context, shortcode string) (db.GetURLByShortCodeRow, error) {
	ret := _m.Called(ctx, shortcode)

	if len(ret) == 0 {
		panic("no return value specified for GetURLByShortCode")
	}

	var r0 db.GetURLByShortCodeRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.GetURLByShortCodeRow, error)); ok {
		return rf(ctx, shortcode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.GetURLByShortCodeRow); ok {
		r0 = rf(ctx, shortcode)
	} else {
		r0 = ret.Get(0).(db.GetURLByShortCodeRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortcode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetURLByShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURLByShortCode'
type MockQuerier_GetURLByShortCode_Call struct {
	*mock.Call
}

// GetURLByShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - shortcode string
func (_e *MockQuerier_Expecter) GetURLByShortCode(ctx interface{}, shortcode interface{}) *MockQuerier_GetURLByShortCode_Call {
	return &MockQuerier_GetURLByShortCode_Call{Call: _e.mock.On("GetURLByShortCode", ctx, shortcode)}
}

func (_c *MockQuerier_GetURLByShortCode_Call) Run(run func(ctx context.Context, shortcode string)) *MockQuerier_GetURLByShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetURLByShortCode_Call) Return(_a0 db.GetURLByShortCodeRow, _a1 error) *MockQuerier_GetURLByShortCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetURLByShortCode_Call) RunAndReturn(run func(context.Context, string) (db.GetURLByShortCodeRow, error)) *MockQuerier_GetURLByShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetURLStatsByShortCode provides a mock function with given fields: ctx, shortcode
func (_m *MockQuerier) GetURLStatsByShortCode(ctx context.Context, shortcode string) (db.Url, error) {
	ret := _m.Called(ctx, shortcode)

	if len(ret) == 0 {
		panic("no return value specified for GetURLStatsByShortCode")
	}

	var r0 db.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.Url, error)); ok {
		return rf(ctx, shortcode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Url); ok {
		r0 = rf(ctx, shortcode)
	} else {
		r0 = ret.Get(0).(db.Url)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortcode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetURLStatsByShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURLStatsByShortCode'
type MockQuerier_GetURLStatsByShortCode_Call struct {
	*mock.Call
}

// GetURLStatsByShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - shortcode string
func (_e *MockQuerier_Expecter) GetURLStatsByShortCode(ctx interface{}, shortcode interface{}) *MockQuerier_GetURLStatsByShortCode_Call {
	return &MockQuerier_GetURLStatsByShortCode_Call{Call: _e.mock.On("GetURLStatsByShortCode", ctx, shortcode)}
}

func (_c *MockQuerier_GetURLStatsByShortCode_Call) Run(run func(ctx context.Context, shortcode string)) *MockQuerier_GetURLStatsByShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetURLStatsByShortCode_Call) Return(_a0 db.Url, _a1 error) *MockQuerier_GetURLStatsByShortCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetURLStatsByShortCode_Call) RunAndReturn(run func(context.Context, string) (db.Url, error)) *MockQuerier_GetURLStatsByShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementURLAccessCountByShortCode provides a mock function with given fields: ctx, shortcode
func (_m *MockQuerier) IncrementURLAccessCountByShortCode(ctx context.Context, shortcode string) error {
	ret := _m.Called(ctx, shortcode)

	if len(ret) == 0 {
		panic("no return value specified for IncrementURLAccessCountByShortCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortcode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuerier_IncrementURLAccessCountByShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementURLAccessCountByShortCode'
type MockQuerier_IncrementURLAccessCountByShortCode_Call struct {
	*mock.Call
}

// IncrementURLAccessCountByShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - shortcode string
func (_e *MockQuerier_Expecter) IncrementURLAccessCountByShortCode(ctx interface{}, shortcode interface{}) *MockQuerier_IncrementURLAccessCountByShortCode_Call {
	return &MockQuerier_IncrementURLAccessCountByShortCode_Call{Call: _e.mock.On("IncrementURLAccessCountByShortCode", ctx, shortcode)}
}

func (_c *MockQuerier_IncrementURLAccessCountByShortCode_Call) Run(run func(ctx context.Context, shortcode string)) *MockQuerier_IncrementURLAccessCountByShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_IncrementURLAccessCountByShortCode_Call) Return(_a0 error) *MockQuerier_IncrementURLAccessCountByShortCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuerier_IncrementURLAccessCountByShortCode_Call) RunAndReturn(run func(context.Context, string) error) *MockQuerier_IncrementURLAccessCountByShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateURLByShortCode provides a mock function with given fields: ctx, arg
func (_m *MockQuerier) UpdateURLByShortCode(ctx context.Context, arg db.UpdateURLByShortCodeParams) (db.UpdateURLByShortCodeRow, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateURLByShortCode")
	}

	var r0 db.UpdateURLByShortCodeRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateURLByShortCodeParams) (db.UpdateURLByShortCodeRow, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, db.UpdateURLByShortCodeParams) db.UpdateURLByShortCodeRow); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(db.UpdateURLByShortCodeRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, db.UpdateURLByShortCodeParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_UpdateURLByShortCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateURLByShortCode'
type MockQuerier_UpdateURLByShortCode_Call struct {
	*mock.Call
}

// UpdateURLByShortCode is a helper method to define mock.On call
//   - ctx context.Context
//   - arg db.UpdateURLByShortCodeParams
func (_e *MockQuerier_Expecter) UpdateURLByShortCode(ctx interface{}, arg interface{}) *MockQuerier_UpdateURLByShortCode_Call {
	return &MockQuerier_UpdateURLByShortCode_Call{Call: _e.mock.On("UpdateURLByShortCode", ctx, arg)}
}

func (_c *MockQuerier_UpdateURLByShortCode_Call) Run(run func(ctx context.Context, arg db.UpdateURLByShortCodeParams)) *MockQuerier_UpdateURLByShortCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(db.UpdateURLByShortCodeParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateURLByShortCode_Call) Return(_a0 db.UpdateURLByShortCodeRow, _a1 error) *MockQuerier_UpdateURLByShortCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_UpdateURLByShortCode_Call) RunAndReturn(run func(context.Context, db.UpdateURLByShortCodeParams) (db.UpdateURLByShortCodeRow, error)) *MockQuerier_UpdateURLByShortCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
