// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: urls.sql

package db

import (
	"context"
	"database/sql"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (url, shortCode)
VALUES (?, ?)
RETURNING id, url, shortCode, createdAt, updatedAt
`

type CreateURLParams struct {
	Url       string `json:"url"`
	Shortcode string `json:"shortcode"`
}

type CreateURLRow struct {
	ID        int64        `json:"id"`
	Url       string       `json:"url"`
	Shortcode string       `json:"shortcode"`
	Createdat sql.NullTime `json:"createdat"`
	Updatedat sql.NullTime `json:"updatedat"`
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (CreateURLRow, error) {
	row := q.db.QueryRowContext(ctx, createURL, arg.Url, arg.Shortcode)
	var i CreateURLRow
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Shortcode,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deleteURLByShortCode = `-- name: DeleteURLByShortCode :exec
DELETE FROM urls
WHERE shortCode = ?
`

func (q *Queries) DeleteURLByShortCode(ctx context.Context, shortcode string) error {
	_, err := q.db.ExecContext(ctx, deleteURLByShortCode, shortcode)
	return err
}

const getURLByShortCode = `-- name: GetURLByShortCode :one
SELECT 
    id,
    url,
    shortCode,
    createdAt,
    updatedAt
FROM urls
WHERE shortCode = ?
`

type GetURLByShortCodeRow struct {
	ID        int64        `json:"id"`
	Url       string       `json:"url"`
	Shortcode string       `json:"shortcode"`
	Createdat sql.NullTime `json:"createdat"`
	Updatedat sql.NullTime `json:"updatedat"`
}

func (q *Queries) GetURLByShortCode(ctx context.Context, shortcode string) (GetURLByShortCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getURLByShortCode, shortcode)
	var i GetURLByShortCodeRow
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Shortcode,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getURLStatsByShortCode = `-- name: GetURLStatsByShortCode :one
SELECT 
    id,
    url,
    shortCode,
    createdAt,
    updatedAt,
    accessCount
FROM urls
WHERE shortCode = ?
`

func (q *Queries) GetURLStatsByShortCode(ctx context.Context, shortcode string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLStatsByShortCode, shortcode)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Shortcode,
		&i.Createdat,
		&i.Updatedat,
		&i.Accesscount,
	)
	return i, err
}

const incrementURLAccessCountByShortCode = `-- name: IncrementURLAccessCountByShortCode :exec
UPDATE urls
SET accessCount = accessCount + 1
WHERE shortCode = ?
`

func (q *Queries) IncrementURLAccessCountByShortCode(ctx context.Context, shortcode string) error {
	_, err := q.db.ExecContext(ctx, incrementURLAccessCountByShortCode, shortcode)
	return err
}

const updateURLByShortCode = `-- name: UpdateURLByShortCode :one
UPDATE urls
SET url = ?, updatedAt = ?
WHERE shortCode = ?
RETURNING id, url, shortCode, createdAt, updatedAt
`

type UpdateURLByShortCodeParams struct {
	Url       string       `json:"url"`
	Updatedat sql.NullTime `json:"updatedat"`
	Shortcode string       `json:"shortcode"`
}

type UpdateURLByShortCodeRow struct {
	ID        int64        `json:"id"`
	Url       string       `json:"url"`
	Shortcode string       `json:"shortcode"`
	Createdat sql.NullTime `json:"createdat"`
	Updatedat sql.NullTime `json:"updatedat"`
}

func (q *Queries) UpdateURLByShortCode(ctx context.Context, arg UpdateURLByShortCodeParams) (UpdateURLByShortCodeRow, error) {
	row := q.db.QueryRowContext(ctx, updateURLByShortCode, arg.Url, arg.Updatedat, arg.Shortcode)
	var i UpdateURLByShortCodeRow
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Shortcode,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
